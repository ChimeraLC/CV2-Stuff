# Counts the number of raised fingers also making use of the third dimension

import cv2
import numpy as np
import mediapipe
import tensorflow as tf
from tensorflow.keras.models import load_model

# initialize mediapipe
mpHands = mediapipe.solutions.hands
hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mpDraw = mediapipe.solutions.drawing_utils

# Initialize the webcam
cap = cv2.VideoCapture(0)

#helper functions
def DotProduct(vector1, vector2):
	total = 0
	for i in range(len(vector1)):
		total += vector1[i] * vector2[i]
	return total
def Magnitude(vector):
	total = 0
	for i in range(len(vector)):
		total += vector[i]**2
	return total ** (1/(len(vector)))
while True:
	# Read each frame from the webcam
	_, frame = cap.read()

	x, y, c = frame.shape

	# Flip the frame vertically
	frame = cv2.flip(frame, 1)
	framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

	# Get hand landmark prediction
	result = hands.process(framergb)

	className = ''

	# post process the result
	if result.multi_hand_landmarks:
		landmarks = []
		raised = True
		for handslms in result.multi_hand_landmarks:
			for lm in handslms.landmark:
				# print(id, lm)
				lmx = int(lm.x * 640)
				lmy = int(lm.y * 480)
				landmarks.append([lmx, lmy])
		# Drawing landmarks on frames
		mpDraw.draw_landmarks(frame, handslms, mpHands.HAND_CONNECTIONS)

		base = landmarks[0]
		pointer = landmarks[5]
		pinky = landmarks[17]

		cv2.circle(frame, base, 2, (50,152,152), 2)
		cv2.circle(frame, pointer, 2, (50, 152, 152), 2)
		cv2.circle(frame, pinky, 2, (50, 152, 152), 2)
		cv2.putText(frame, str(Magnitude([base[0] - pointer[0], base[1]-pointer[1]])), (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 
					1, (0,0,255), 2, cv2.LINE_AA)
		cv2.putText(frame, str(Magnitude([base[0] - pinky[0], base[1]-pinky[1]])), (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 
					1, (0,0,255), 2, cv2.LINE_AA)
		cv2.putText(frame, str(Magnitude([pinky[0] - pointer[0], pinky[1]-pointer[1]])), (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 
					1, (0,0,255), 2, cv2.LINE_AA)

	# Show the final output
	cv2.imshow("Output", frame) 

	if cv2.waitKey(1) == ord(' '):
		break

# release the webcam and destroy all active windows
cap.release()

cv2.destroyAllWindows()